// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// WETHRebasingMetaData contains all meta data concerning the WETHRebasing contract.
var WETHRebasingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApproveFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimToZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"name\":\"DistributeFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReporter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotClaimableAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIsInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumYieldMode\",\"name\":\"yieldMode\",\"type\":\"uint8\"}],\"name\":\"Configure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumYieldMode\",\"name\":\"yieldMode\",\"type\":\"uint8\"}],\"name\":\"configure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributePending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getConfiguration\",\"outputs\":[{\"internalType\":\"enumYieldMode\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b50604360981b608052601260a052600160c052600060e0819052610100526200003a62000040565b62000101565b600054610100900460ff1615620000ad5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000ff576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b60805160a05160c05160e05161010051612d486200014d60003960006109380152600061090f015260006108e6015260006103000152600081816103c50152611ac20152612d486000f3fe6080604052600436106101bb5760003560e01c80637ae556b5116100ec578063aad3ec961161008a578063d505accf11610064578063d505accf1461052f578063dd62ed3e1461054f578063e12f3a61146105a2578063e20ccec3146105c257600080fd5b8063aad3ec96146104b4578063c44b11f7146104d4578063d0e30db01461052757600080fd5b806384b0196e116100c657806384b0196e1461044157806395d89b4114610469578063a035b1fe1461047e578063a9059cbb1461049457600080fd5b80637ae556b5146103b35780637ecebe001461040c5780638129fc1c1461042c57600080fd5b806330adf81f116101595780634291cd11116101335780634291cd111461034957806354fd4d501461035e5780635b9af12b1461037357806370a082311461039357600080fd5b806330adf81f146102ba578063313ce567146102ee5780633644e5151461033457600080fd5b806318160ddd1161019557806318160ddd146102455780631a33757d1461025a57806323b872dd1461027a5780632e1a7d4d1461029a57600080fd5b806306661abd146101cf57806306fdde03146101f3578063095ea7b31461021557600080fd5b366101ca576101c86105d8565b005b600080fd5b3480156101db57600080fd5b50609d545b6040519081526020015b60405180910390f35b3480156101ff57600080fd5b50610208610636565b6040516101ea919061266d565b34801561022157600080fd5b506102356102303660046126a9565b6106c4565b60405190151581526020016101ea565b34801561025157600080fd5b506101e06106de565b34801561026657600080fd5b506101e06102753660046126d3565b610702565b34801561028657600080fd5b506102356102953660046126f4565b610765565b3480156102a657600080fd5b506101c86102b5366004612730565b610787565b3480156102c657600080fd5b506101e07f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b3480156102fa57600080fd5b506103227f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016101ea565b34801561034057600080fd5b506101e0610881565b34801561035557600080fd5b506101c861088b565b34801561036a57600080fd5b506102086108df565b34801561037f57600080fd5b506101c861038e366004612730565b610982565b34801561039f57600080fd5b506101e06103ae366004612749565b61098e565b3480156103bf57600080fd5b506103e77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ea565b34801561041857600080fd5b506101e0610427366004612749565b610a41565b34801561043857600080fd5b506101c8610a6c565b34801561044d57600080fd5b50610456610d77565b6040516101ea9796959493929190612764565b34801561047557600080fd5b50610208610e53565b34801561048a57600080fd5b506101e060685481565b3480156104a057600080fd5b506102356104af3660046126a9565b610e60565b3480156104c057600080fd5b506101e06104cf3660046126a9565b610e76565b3480156104e057600080fd5b5061051a6104ef366004612749565b73ffffffffffffffffffffffffffffffffffffffff16600090815260a1602052604090205460ff1690565b6040516101ea9190612866565b6101c86105d8565b34801561053b57600080fd5b506101c861054a366004612874565b6110ab565b34801561055b57600080fd5b506101e061056a3660046128e7565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260a26020908152604080832093909416825291909152205490565b3480156105ae57600080fd5b506101e06105bd366004612749565b61126a565b3480156105ce57600080fd5b506101e060695481565b336105e38134611354565b8073ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3460405161062b91815260200190565b60405180910390a250565b609a80546106439061291a565b80601f016020809104026020016040519081016040528092919081815260200182805461066f9061291a565b80156106bc5780601f10610691576101008083540402835291602001916106bc565b820191906000526020600020905b81548152906001019060200180831161069f57829003601f168201915b505050505081565b6000336106d28185856113d8565b60019150505b92915050565b600060a054609d546068546106f39190612996565b6106fd91906129d3565b905090565b600061070e33836114e1565b3373ffffffffffffffffffffffffffffffffffffffff167fcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36836040516107549190612866565b60405180910390a26106d83361098e565b6000610772843384611672565b61077d848484611713565b5060019392505050565b336107928183611820565b60008173ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d80600081146107ec576040519150601f19603f3d011682016040523d82523d6000602084013e6107f1565b606091505b505090508061082c576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658460405161087491815260200190565b60405180910390a2505050565b60006106fd6118c9565b6108936118d3565b6108dd57609d546069546040517f0f68f20e000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044015b60405180910390fd5b565b606061090a7f000000000000000000000000000000000000000000000000000000000000000061196d565b6109337f000000000000000000000000000000000000000000000000000000000000000061196d565b61095c7f000000000000000000000000000000000000000000000000000000000000000061196d565b60405160200161096e939291906129eb565b604051602081830303815290604052905090565b61098b81611aaa565b50565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260a1602052604081205460ff16818160028111156109ca576109ca612823565b03610a125773ffffffffffffffffffffffffffffffffffffffff83166000908152609c6020908152604080832054609e90925290912054610a0b9190611b8c565b9150610a3b565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609f602052604090205491505b50919050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603560205260408120546106d8565b600054610100900460ff1615808015610a8c5750600054600160ff909116105b80610aa65750303b158015610aa6575060005460ff166001145b610b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016108d4565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610b9057600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610c876040518060400160405280600d81526020017f57726170706564204574686572000000000000000000000000000000000000008152506040518060400160405280600481526020017f574554480000000000000000000000000000000000000000000000000000000081525073430000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190612a61565b611ba7565b6040517f4c802f3800000000000000000000000000000000000000000000000000000000815273430000000000000000000000000000000000000290634c802f3890610ce0903090600090819061dead90600401612a7a565b600060405180830381600087803b158015610cfa57600080fd5b505af1158015610d0e573d6000803e3d6000fd5b50505050801561098b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b6000606080600080600060606001546000801b148015610d975750600254155b610dfd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4549503731323a20556e696e697469616c697a6564000000000000000000000060448201526064016108d4565b610e05611c69565b610e0d611cfb565b604080516000808252602082019092527f0f000000000000000000000000000000000000000000000000000000000000009b939a50919850469750309650945092509050565b609b80546106439061291a565b6000610e6d338484611713565b50600192915050565b60003373ffffffffffffffffffffffffffffffffffffffff8416610ec6576040517f446b606800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600273ffffffffffffffffffffffffffffffffffffffff8216600090815260a1602052604090205460ff166002811115610f0257610f02612823565b14610f39576040517febf953c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000908152609c6020908152604080832054609e909252822054610f749190611b8c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152609f602052604081205491925090610fa89083612afd565b905080851115610fe4576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610ff9610ff48886612afd565b611d0a565b91509150611048858383609f60008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d3f565b6110528888611354565b60405187815273ffffffffffffffffffffffffffffffffffffffff89169033907f70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd9870689060200160405180910390a350949695505050505050565b83421115611115576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e6500000060448201526064016108d4565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886111448c611e02565b60408051602081019690965273ffffffffffffffffffffffffffffffffffffffff94851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006111ac82611e35565b905060006111bc82878787611e7d565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e6174757265000060448201526064016108d4565b61125e8a8a8a6113d8565b50505050505050505050565b6000600273ffffffffffffffffffffffffffffffffffffffff8316600090815260a1602052604090205460ff1660028111156112a8576112a8612823565b146112df576040517febf953c700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152609c6020908152604080832054609e90925282205461131a9190611b8c565b73ffffffffffffffffffffffffffffffffffffffff84166000908152609f602052604090205490915061134d9082612afd565b9392505050565b6000816113608461098e565b61136a91906129d3565b905061137883826000611ea5565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260a1602052604090205460ff1660018160028111156113b5576113b5612823565b036113d2578260a060008282546113cc91906129d3565b90915550505b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316611425576040517feb3b083500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611472576040517f3b719e1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff838116600081815260a2602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260a1602052604081205460ff16906002828181111561151e5761151e612823565b036115665773ffffffffffffffffffffffffffffffffffffffff84166000908152609c6020908152604080832054609e9092529091205461155f9190611b8c565b9050611572565b61156f8461098e565b90505b73ffffffffffffffffffffffffffffffffffffffff8416600090815260a16020526040902080548491907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156115d2576115d2612823565b021790555073ffffffffffffffffffffffffffffffffffffffff84166000908152609f602052604090205461160985836001611ea5565b600183600281111561161d5761161d612823565b0361163a578060a060008282546116349190612afd565b90915550505b600184600281111561164e5761164e612823565b0361166b578160a0600082825461166591906129d3565b90915550505b5050505050565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260a260209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113d25780821115611706576040517f13be252b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113d284848484036113d8565b73ffffffffffffffffffffffffffffffffffffffff8316611760576040517f160fca8a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166117ad576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117b78382611820565b6117c18282611354565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516114d491815260200190565b600061182b8361098e565b905080821115611867576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611875838383036000611ea5565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260a1602052604090205460ff1660018160028111156118b2576118b2612823565b036113d2578260a060008282546113cc9190612afd565b60006106fd611fec565b60006118de609d5490565b60695410806118ed5750609d54155b156118f85750600090565b609d546069546119089190612b43565b6068600082825461191991906129d3565b9091555050609d5460695461192e9190612b57565b6069556068546040519081527f270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b79060200160405180910390a150600190565b6060816000036119b057505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b81156119da57806119c481612b6b565b91506119d39050600a83612b43565b91506119b4565b60008167ffffffffffffffff8111156119f5576119f5612ace565b6040519080825280601f01601f191660200182016040528015611a1f576020820181803683370190505b5090505b8415611aa257611a34600183612afd565b9150611a41600a86612b57565b611a4c9060306129d3565b60f81b818381518110611a6157611a61612ba3565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611a9b600a86612b43565b9450611a23565b949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611b19576040517f3ae6ee0a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609d54606854611b2b9190612996565b9050600060a0548247611b3e9190612afd565b611b489190612afd565b9050609d54811080611b5a5750609d54155b15611b6457505050565b609d54611b719082612b43565b60686000828254611b8291906129d3565b9091555050505050565b60008183606854611b9d9190612996565b61134d91906129d3565b600054610100900460ff16611c3e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108d4565b611c4783612060565b611c5081612136565b609a611c5c8482612c21565b50609b6113d28382612c21565b606060038054611c789061291a565b80601f0160208091040260200160405190810160405280929190818152602001828054611ca49061291a565b8015611cf15780601f10611cc657610100808354040283529160200191611cf1565b820191906000526020600020905b815481529060010190602001808311611cd457829003601f168201915b5050505050905090565b606060048054611c789061291a565b600080606854600003611d1b575091565b606854611d289084612b43565b915060685483611d389190612b57565b9050915091565b73ffffffffffffffffffffffffffffffffffffffff84166000908152609c6020526040902054609d54611d739085906129d3565b611d7d9190612afd565b609d5573ffffffffffffffffffffffffffffffffffffffff84166000908152609e602052604090205460a054611db49084906129d3565b611dbe9190612afd565b60a05573ffffffffffffffffffffffffffffffffffffffff9093166000908152609c6020908152604080832094909455609e815283822092909255609f9091522055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152603560205260409020805460018101825590610a3b565b60006106d8611e426118c9565b836040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6000806000611e8e8787878761220c565b91509150611e9b816122fb565b5095945050505050565b600080600080611eda8773ffffffffffffffffffffffffffffffffffffffff16600090815260a1602052604090205460ff1690565b90506000816002811115611ef057611ef0612823565b03611f0857611efe86611d0a565b9094509250611fd7565b6001816002811115611f1c57611f1c612823565b03611f2957859150611fd7565b6002816002811115611f3d57611f3d612823565b03611fd7578591508185611fc75773ffffffffffffffffffffffffffffffffffffffff88166000908152609c6020908152604080832054609e90925290912054611f879190611b8c565b73ffffffffffffffffffffffffffffffffffffffff89166000908152609f6020526040902054909150611fba88836129d3565b611fc49190612afd565b90505b611fd081611d0a565b9095509350505b611fe387858585611d3f565b50505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6120176124ae565b61201f612507565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600054610100900460ff166120f7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108d4565b61098b816040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250612538565b600054610100900460ff166121cd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108d4565b60685415612207576040517f4c72d1b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606855565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561224357506000905060036122f2565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612297573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166122eb576000600192509250506122f2565b9150600090505b94509492505050565b600081600481111561230f5761230f612823565b036123175750565b600181600481111561232b5761232b612823565b03612392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016108d4565b60028160048111156123a6576123a6612823565b0361240d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016108d4565b600381600481111561242157612421612823565b0361098b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016108d4565b6000806124b9611c69565b8051909150156124d0578051602090910120919050565b60015480156124df5792915050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4709250505090565b600080612512611cfb565b805190915015612529578051602090910120919050565b60025480156124df5792915050565b600054610100900460ff166125cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016108d4565b60036125db8382612c21565b5060046125e88282612c21565b50506000600181905560025550565b60005b838110156126125781810151838201526020016125fa565b838111156113d25750506000910152565b6000815180845261263b8160208601602086016125f7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061134d6020830184612623565b803573ffffffffffffffffffffffffffffffffffffffff811681146126a457600080fd5b919050565b600080604083850312156126bc57600080fd5b6126c583612680565b946020939093013593505050565b6000602082840312156126e557600080fd5b81356003811061134d57600080fd5b60008060006060848603121561270957600080fd5b61271284612680565b925061272060208501612680565b9150604084013590509250925092565b60006020828403121561274257600080fd5b5035919050565b60006020828403121561275b57600080fd5b61134d82612680565b7fff00000000000000000000000000000000000000000000000000000000000000881681526000602060e0818401526127a060e084018a612623565b83810360408501526127b2818a612623565b6060850189905273ffffffffffffffffffffffffffffffffffffffff8816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015612811578351835292840192918401916001016127f5565b50909c9b505050505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061286257612862612823565b9052565b602081016106d88284612852565b600080600080600080600060e0888a03121561288f57600080fd5b61289888612680565b96506128a660208901612680565b95506040880135945060608801359350608088013560ff811681146128ca57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156128fa57600080fd5b61290383612680565b915061291160208401612680565b90509250929050565b600181811c9082168061292e57607f821691505b602082108103610a3b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156129ce576129ce612967565b500290565b600082198211156129e6576129e6612967565b500190565b600084516129fd8184602089016125f7565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612a39816001850160208a016125f7565b60019201918201528351612a548160028401602088016125f7565b0160020195945050505050565b600060208284031215612a7357600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff85811682526080820190612aa66020840187612852565b60028510612ab657612ab6612823565b84604084015280841660608401525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082821015612b0f57612b0f612967565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082612b5257612b52612b14565b500490565b600082612b6657612b66612b14565b500690565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b9c57612b9c612967565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b601f821115612c1c57600081815260208120601f850160051c81016020861015612bf95750805b601f850160051c820191505b81811015612c1857828155600101612c05565b5050505b505050565b815167ffffffffffffffff811115612c3b57612c3b612ace565b612c4f81612c49845461291a565b84612bd2565b602080601f831160018114612ca25760008415612c6c5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555612c18565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b82811015612cef57888601518255948401946001909101908401612cd0565b5085821015612d2b57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b0190555056fea164736f6c634300080f000a",
}

// WETHRebasingABI is the input ABI used to generate the binding from.
// Deprecated: Use WETHRebasingMetaData.ABI instead.
var WETHRebasingABI = WETHRebasingMetaData.ABI

// WETHRebasingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WETHRebasingMetaData.Bin instead.
var WETHRebasingBin = WETHRebasingMetaData.Bin

// DeployWETHRebasing deploys a new Ethereum contract, binding an instance of WETHRebasing to it.
func DeployWETHRebasing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *WETHRebasing, error) {
	parsed, err := WETHRebasingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WETHRebasingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WETHRebasing{WETHRebasingCaller: WETHRebasingCaller{contract: contract}, WETHRebasingTransactor: WETHRebasingTransactor{contract: contract}, WETHRebasingFilterer: WETHRebasingFilterer{contract: contract}}, nil
}

// WETHRebasing is an auto generated Go binding around an Ethereum contract.
type WETHRebasing struct {
	WETHRebasingCaller     // Read-only binding to the contract
	WETHRebasingTransactor // Write-only binding to the contract
	WETHRebasingFilterer   // Log filterer for contract events
}

// WETHRebasingCaller is an auto generated read-only Go binding around an Ethereum contract.
type WETHRebasingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETHRebasingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WETHRebasingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETHRebasingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WETHRebasingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WETHRebasingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WETHRebasingSession struct {
	Contract     *WETHRebasing     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WETHRebasingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WETHRebasingCallerSession struct {
	Contract *WETHRebasingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// WETHRebasingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WETHRebasingTransactorSession struct {
	Contract     *WETHRebasingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// WETHRebasingRaw is an auto generated low-level Go binding around an Ethereum contract.
type WETHRebasingRaw struct {
	Contract *WETHRebasing // Generic contract binding to access the raw methods on
}

// WETHRebasingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WETHRebasingCallerRaw struct {
	Contract *WETHRebasingCaller // Generic read-only contract binding to access the raw methods on
}

// WETHRebasingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WETHRebasingTransactorRaw struct {
	Contract *WETHRebasingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWETHRebasing creates a new instance of WETHRebasing, bound to a specific deployed contract.
func NewWETHRebasing(address common.Address, backend bind.ContractBackend) (*WETHRebasing, error) {
	contract, err := bindWETHRebasing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WETHRebasing{WETHRebasingCaller: WETHRebasingCaller{contract: contract}, WETHRebasingTransactor: WETHRebasingTransactor{contract: contract}, WETHRebasingFilterer: WETHRebasingFilterer{contract: contract}}, nil
}

// NewWETHRebasingCaller creates a new read-only instance of WETHRebasing, bound to a specific deployed contract.
func NewWETHRebasingCaller(address common.Address, caller bind.ContractCaller) (*WETHRebasingCaller, error) {
	contract, err := bindWETHRebasing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingCaller{contract: contract}, nil
}

// NewWETHRebasingTransactor creates a new write-only instance of WETHRebasing, bound to a specific deployed contract.
func NewWETHRebasingTransactor(address common.Address, transactor bind.ContractTransactor) (*WETHRebasingTransactor, error) {
	contract, err := bindWETHRebasing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingTransactor{contract: contract}, nil
}

// NewWETHRebasingFilterer creates a new log filterer instance of WETHRebasing, bound to a specific deployed contract.
func NewWETHRebasingFilterer(address common.Address, filterer bind.ContractFilterer) (*WETHRebasingFilterer, error) {
	contract, err := bindWETHRebasing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingFilterer{contract: contract}, nil
}

// bindWETHRebasing binds a generic wrapper to an already deployed contract.
func bindWETHRebasing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := WETHRebasingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETHRebasing *WETHRebasingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETHRebasing.Contract.WETHRebasingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETHRebasing *WETHRebasingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHRebasing.Contract.WETHRebasingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETHRebasing *WETHRebasingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETHRebasing.Contract.WETHRebasingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WETHRebasing *WETHRebasingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WETHRebasing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WETHRebasing *WETHRebasingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHRebasing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WETHRebasing *WETHRebasingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WETHRebasing.Contract.contract.Transact(opts, method, params...)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_WETHRebasing *WETHRebasingCaller) DOMAINSEPARATOR(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "DOMAIN_SEPARATOR")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_WETHRebasing *WETHRebasingSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _WETHRebasing.Contract.DOMAINSEPARATOR(&_WETHRebasing.CallOpts)
}

// DOMAINSEPARATOR is a free data retrieval call binding the contract method 0x3644e515.
//
// Solidity: function DOMAIN_SEPARATOR() view returns(bytes32)
func (_WETHRebasing *WETHRebasingCallerSession) DOMAINSEPARATOR() ([32]byte, error) {
	return _WETHRebasing.Contract.DOMAINSEPARATOR(&_WETHRebasing.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_WETHRebasing *WETHRebasingCaller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_WETHRebasing *WETHRebasingSession) PERMITTYPEHASH() ([32]byte, error) {
	return _WETHRebasing.Contract.PERMITTYPEHASH(&_WETHRebasing.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_WETHRebasing *WETHRebasingCallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _WETHRebasing.Contract.PERMITTYPEHASH(&_WETHRebasing.CallOpts)
}

// REPORTER is a free data retrieval call binding the contract method 0x7ae556b5.
//
// Solidity: function REPORTER() view returns(address)
func (_WETHRebasing *WETHRebasingCaller) REPORTER(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "REPORTER")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// REPORTER is a free data retrieval call binding the contract method 0x7ae556b5.
//
// Solidity: function REPORTER() view returns(address)
func (_WETHRebasing *WETHRebasingSession) REPORTER() (common.Address, error) {
	return _WETHRebasing.Contract.REPORTER(&_WETHRebasing.CallOpts)
}

// REPORTER is a free data retrieval call binding the contract method 0x7ae556b5.
//
// Solidity: function REPORTER() view returns(address)
func (_WETHRebasing *WETHRebasingCallerSession) REPORTER() (common.Address, error) {
	return _WETHRebasing.Contract.REPORTER(&_WETHRebasing.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.Allowance(&_WETHRebasing.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.Allowance(&_WETHRebasing.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 value)
func (_WETHRebasing *WETHRebasingCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 value)
func (_WETHRebasing *WETHRebasingSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.BalanceOf(&_WETHRebasing.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256 value)
func (_WETHRebasing *WETHRebasingCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.BalanceOf(&_WETHRebasing.CallOpts, account)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) Count(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "count")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Count() (*big.Int, error) {
	return _WETHRebasing.Contract.Count(&_WETHRebasing.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) Count() (*big.Int, error) {
	return _WETHRebasing.Contract.Count(&_WETHRebasing.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETHRebasing *WETHRebasingCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETHRebasing *WETHRebasingSession) Decimals() (uint8, error) {
	return _WETHRebasing.Contract.Decimals(&_WETHRebasing.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_WETHRebasing *WETHRebasingCallerSession) Decimals() (uint8, error) {
	return _WETHRebasing.Contract.Decimals(&_WETHRebasing.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_WETHRebasing *WETHRebasingCaller) Eip712Domain(opts *bind.CallOpts) (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "eip712Domain")

	outstruct := new(struct {
		Fields            [1]byte
		Name              string
		Version           string
		ChainId           *big.Int
		VerifyingContract common.Address
		Salt              [32]byte
		Extensions        []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fields = *abi.ConvertType(out[0], new([1]byte)).(*[1]byte)
	outstruct.Name = *abi.ConvertType(out[1], new(string)).(*string)
	outstruct.Version = *abi.ConvertType(out[2], new(string)).(*string)
	outstruct.ChainId = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.VerifyingContract = *abi.ConvertType(out[4], new(common.Address)).(*common.Address)
	outstruct.Salt = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)
	outstruct.Extensions = *abi.ConvertType(out[6], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_WETHRebasing *WETHRebasingSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _WETHRebasing.Contract.Eip712Domain(&_WETHRebasing.CallOpts)
}

// Eip712Domain is a free data retrieval call binding the contract method 0x84b0196e.
//
// Solidity: function eip712Domain() view returns(bytes1 fields, string name, string version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] extensions)
func (_WETHRebasing *WETHRebasingCallerSession) Eip712Domain() (struct {
	Fields            [1]byte
	Name              string
	Version           string
	ChainId           *big.Int
	VerifyingContract common.Address
	Salt              [32]byte
	Extensions        []*big.Int
}, error) {
	return _WETHRebasing.Contract.Eip712Domain(&_WETHRebasing.CallOpts)
}

// GetClaimableAmount is a free data retrieval call binding the contract method 0xe12f3a61.
//
// Solidity: function getClaimableAmount(address account) view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) GetClaimableAmount(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "getClaimableAmount", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetClaimableAmount is a free data retrieval call binding the contract method 0xe12f3a61.
//
// Solidity: function getClaimableAmount(address account) view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) GetClaimableAmount(account common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.GetClaimableAmount(&_WETHRebasing.CallOpts, account)
}

// GetClaimableAmount is a free data retrieval call binding the contract method 0xe12f3a61.
//
// Solidity: function getClaimableAmount(address account) view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) GetClaimableAmount(account common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.GetClaimableAmount(&_WETHRebasing.CallOpts, account)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address account) view returns(uint8)
func (_WETHRebasing *WETHRebasingCaller) GetConfiguration(opts *bind.CallOpts, account common.Address) (uint8, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "getConfiguration", account)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address account) view returns(uint8)
func (_WETHRebasing *WETHRebasingSession) GetConfiguration(account common.Address) (uint8, error) {
	return _WETHRebasing.Contract.GetConfiguration(&_WETHRebasing.CallOpts, account)
}

// GetConfiguration is a free data retrieval call binding the contract method 0xc44b11f7.
//
// Solidity: function getConfiguration(address account) view returns(uint8)
func (_WETHRebasing *WETHRebasingCallerSession) GetConfiguration(account common.Address) (uint8, error) {
	return _WETHRebasing.Contract.GetConfiguration(&_WETHRebasing.CallOpts, account)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETHRebasing *WETHRebasingCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETHRebasing *WETHRebasingSession) Name() (string, error) {
	return _WETHRebasing.Contract.Name(&_WETHRebasing.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_WETHRebasing *WETHRebasingCallerSession) Name() (string, error) {
	return _WETHRebasing.Contract.Name(&_WETHRebasing.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) Nonces(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "nonces", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Nonces(owner common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.Nonces(&_WETHRebasing.CallOpts, owner)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address owner) view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) Nonces(owner common.Address) (*big.Int, error) {
	return _WETHRebasing.Contract.Nonces(&_WETHRebasing.CallOpts, owner)
}

// Pending is a free data retrieval call binding the contract method 0xe20ccec3.
//
// Solidity: function pending() view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) Pending(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "pending")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Pending is a free data retrieval call binding the contract method 0xe20ccec3.
//
// Solidity: function pending() view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Pending() (*big.Int, error) {
	return _WETHRebasing.Contract.Pending(&_WETHRebasing.CallOpts)
}

// Pending is a free data retrieval call binding the contract method 0xe20ccec3.
//
// Solidity: function pending() view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) Pending() (*big.Int, error) {
	return _WETHRebasing.Contract.Pending(&_WETHRebasing.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) Price(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "price")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Price() (*big.Int, error) {
	return _WETHRebasing.Contract.Price(&_WETHRebasing.CallOpts)
}

// Price is a free data retrieval call binding the contract method 0xa035b1fe.
//
// Solidity: function price() view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) Price() (*big.Int, error) {
	return _WETHRebasing.Contract.Price(&_WETHRebasing.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETHRebasing *WETHRebasingCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETHRebasing *WETHRebasingSession) Symbol() (string, error) {
	return _WETHRebasing.Contract.Symbol(&_WETHRebasing.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_WETHRebasing *WETHRebasingCallerSession) Symbol() (string, error) {
	return _WETHRebasing.Contract.Symbol(&_WETHRebasing.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETHRebasing *WETHRebasingCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETHRebasing *WETHRebasingSession) TotalSupply() (*big.Int, error) {
	return _WETHRebasing.Contract.TotalSupply(&_WETHRebasing.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_WETHRebasing *WETHRebasingCallerSession) TotalSupply() (*big.Int, error) {
	return _WETHRebasing.Contract.TotalSupply(&_WETHRebasing.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_WETHRebasing *WETHRebasingCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _WETHRebasing.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_WETHRebasing *WETHRebasingSession) Version() (string, error) {
	return _WETHRebasing.Contract.Version(&_WETHRebasing.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_WETHRebasing *WETHRebasingCallerSession) Version() (string, error) {
	return _WETHRebasing.Contract.Version(&_WETHRebasing.CallOpts)
}

// AddValue is a paid mutator transaction binding the contract method 0x5b9af12b.
//
// Solidity: function addValue(uint256 value) returns()
func (_WETHRebasing *WETHRebasingTransactor) AddValue(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "addValue", value)
}

// AddValue is a paid mutator transaction binding the contract method 0x5b9af12b.
//
// Solidity: function addValue(uint256 value) returns()
func (_WETHRebasing *WETHRebasingSession) AddValue(value *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.AddValue(&_WETHRebasing.TransactOpts, value)
}

// AddValue is a paid mutator transaction binding the contract method 0x5b9af12b.
//
// Solidity: function addValue(uint256 value) returns()
func (_WETHRebasing *WETHRebasingTransactorSession) AddValue(value *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.AddValue(&_WETHRebasing.TransactOpts, value)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Approve(&_WETHRebasing.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Approve(&_WETHRebasing.TransactOpts, spender, amount)
}

// Claim is a paid mutator transaction binding the contract method 0xaad3ec96.
//
// Solidity: function claim(address recipient, uint256 amount) returns(uint256)
func (_WETHRebasing *WETHRebasingTransactor) Claim(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "claim", recipient, amount)
}

// Claim is a paid mutator transaction binding the contract method 0xaad3ec96.
//
// Solidity: function claim(address recipient, uint256 amount) returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Claim(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Claim(&_WETHRebasing.TransactOpts, recipient, amount)
}

// Claim is a paid mutator transaction binding the contract method 0xaad3ec96.
//
// Solidity: function claim(address recipient, uint256 amount) returns(uint256)
func (_WETHRebasing *WETHRebasingTransactorSession) Claim(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Claim(&_WETHRebasing.TransactOpts, recipient, amount)
}

// Configure is a paid mutator transaction binding the contract method 0x1a33757d.
//
// Solidity: function configure(uint8 yieldMode) returns(uint256)
func (_WETHRebasing *WETHRebasingTransactor) Configure(opts *bind.TransactOpts, yieldMode uint8) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "configure", yieldMode)
}

// Configure is a paid mutator transaction binding the contract method 0x1a33757d.
//
// Solidity: function configure(uint8 yieldMode) returns(uint256)
func (_WETHRebasing *WETHRebasingSession) Configure(yieldMode uint8) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Configure(&_WETHRebasing.TransactOpts, yieldMode)
}

// Configure is a paid mutator transaction binding the contract method 0x1a33757d.
//
// Solidity: function configure(uint8 yieldMode) returns(uint256)
func (_WETHRebasing *WETHRebasingTransactorSession) Configure(yieldMode uint8) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Configure(&_WETHRebasing.TransactOpts, yieldMode)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETHRebasing *WETHRebasingTransactor) Deposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "deposit")
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETHRebasing *WETHRebasingSession) Deposit() (*types.Transaction, error) {
	return _WETHRebasing.Contract.Deposit(&_WETHRebasing.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xd0e30db0.
//
// Solidity: function deposit() payable returns()
func (_WETHRebasing *WETHRebasingTransactorSession) Deposit() (*types.Transaction, error) {
	return _WETHRebasing.Contract.Deposit(&_WETHRebasing.TransactOpts)
}

// DistributePending is a paid mutator transaction binding the contract method 0x4291cd11.
//
// Solidity: function distributePending() returns()
func (_WETHRebasing *WETHRebasingTransactor) DistributePending(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "distributePending")
}

// DistributePending is a paid mutator transaction binding the contract method 0x4291cd11.
//
// Solidity: function distributePending() returns()
func (_WETHRebasing *WETHRebasingSession) DistributePending() (*types.Transaction, error) {
	return _WETHRebasing.Contract.DistributePending(&_WETHRebasing.TransactOpts)
}

// DistributePending is a paid mutator transaction binding the contract method 0x4291cd11.
//
// Solidity: function distributePending() returns()
func (_WETHRebasing *WETHRebasingTransactorSession) DistributePending() (*types.Transaction, error) {
	return _WETHRebasing.Contract.DistributePending(&_WETHRebasing.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_WETHRebasing *WETHRebasingTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_WETHRebasing *WETHRebasingSession) Initialize() (*types.Transaction, error) {
	return _WETHRebasing.Contract.Initialize(&_WETHRebasing.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_WETHRebasing *WETHRebasingTransactorSession) Initialize() (*types.Transaction, error) {
	return _WETHRebasing.Contract.Initialize(&_WETHRebasing.TransactOpts)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_WETHRebasing *WETHRebasingTransactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "permit", owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_WETHRebasing *WETHRebasingSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Permit(&_WETHRebasing.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_WETHRebasing *WETHRebasingTransactorSession) Permit(owner common.Address, spender common.Address, value *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Permit(&_WETHRebasing.TransactOpts, owner, spender, value, deadline, v, r, s)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Transfer(&_WETHRebasing.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Transfer(&_WETHRebasing.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.TransferFrom(&_WETHRebasing.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_WETHRebasing *WETHRebasingTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.TransferFrom(&_WETHRebasing.TransactOpts, from, to, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETHRebasing *WETHRebasingTransactor) Withdraw(opts *bind.TransactOpts, wad *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.contract.Transact(opts, "withdraw", wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETHRebasing *WETHRebasingSession) Withdraw(wad *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Withdraw(&_WETHRebasing.TransactOpts, wad)
}

// Withdraw is a paid mutator transaction binding the contract method 0x2e1a7d4d.
//
// Solidity: function withdraw(uint256 wad) returns()
func (_WETHRebasing *WETHRebasingTransactorSession) Withdraw(wad *big.Int) (*types.Transaction, error) {
	return _WETHRebasing.Contract.Withdraw(&_WETHRebasing.TransactOpts, wad)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETHRebasing *WETHRebasingTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WETHRebasing.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETHRebasing *WETHRebasingSession) Receive() (*types.Transaction, error) {
	return _WETHRebasing.Contract.Receive(&_WETHRebasing.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_WETHRebasing *WETHRebasingTransactorSession) Receive() (*types.Transaction, error) {
	return _WETHRebasing.Contract.Receive(&_WETHRebasing.TransactOpts)
}

// WETHRebasingApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the WETHRebasing contract.
type WETHRebasingApprovalIterator struct {
	Event *WETHRebasingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingApproval represents a Approval event raised by the WETHRebasing contract.
type WETHRebasingApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_WETHRebasing *WETHRebasingFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*WETHRebasingApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingApprovalIterator{contract: _WETHRebasing.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_WETHRebasing *WETHRebasingFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *WETHRebasingApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingApproval)
				if err := _WETHRebasing.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_WETHRebasing *WETHRebasingFilterer) ParseApproval(log types.Log) (*WETHRebasingApproval, error) {
	event := new(WETHRebasingApproval)
	if err := _WETHRebasing.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the WETHRebasing contract.
type WETHRebasingClaimIterator struct {
	Event *WETHRebasingClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingClaim represents a Claim event raised by the WETHRebasing contract.
type WETHRebasingClaim struct {
	Account   common.Address
	Recipient common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068.
//
// Solidity: event Claim(address indexed account, address indexed recipient, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) FilterClaim(opts *bind.FilterOpts, account []common.Address, recipient []common.Address) (*WETHRebasingClaimIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Claim", accountRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingClaimIterator{contract: _WETHRebasing.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068.
//
// Solidity: event Claim(address indexed account, address indexed recipient, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *WETHRebasingClaim, account []common.Address, recipient []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var recipientRule []interface{}
	for _, recipientItem := range recipient {
		recipientRule = append(recipientRule, recipientItem)
	}

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Claim", accountRule, recipientRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingClaim)
				if err := _WETHRebasing.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x70eb43c4a8ae8c40502dcf22436c509c28d6ff421cf07c491be56984bd987068.
//
// Solidity: event Claim(address indexed account, address indexed recipient, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) ParseClaim(log types.Log) (*WETHRebasingClaim, error) {
	event := new(WETHRebasingClaim)
	if err := _WETHRebasing.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingConfigureIterator is returned from FilterConfigure and is used to iterate over the raw logs and unpacked data for Configure events raised by the WETHRebasing contract.
type WETHRebasingConfigureIterator struct {
	Event *WETHRebasingConfigure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingConfigureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingConfigure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingConfigure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingConfigureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingConfigureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingConfigure represents a Configure event raised by the WETHRebasing contract.
type WETHRebasingConfigure struct {
	Account   common.Address
	YieldMode uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterConfigure is a free log retrieval operation binding the contract event 0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36.
//
// Solidity: event Configure(address indexed account, uint8 yieldMode)
func (_WETHRebasing *WETHRebasingFilterer) FilterConfigure(opts *bind.FilterOpts, account []common.Address) (*WETHRebasingConfigureIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Configure", accountRule)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingConfigureIterator{contract: _WETHRebasing.contract, event: "Configure", logs: logs, sub: sub}, nil
}

// WatchConfigure is a free log subscription operation binding the contract event 0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36.
//
// Solidity: event Configure(address indexed account, uint8 yieldMode)
func (_WETHRebasing *WETHRebasingFilterer) WatchConfigure(opts *bind.WatchOpts, sink chan<- *WETHRebasingConfigure, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Configure", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingConfigure)
				if err := _WETHRebasing.contract.UnpackLog(event, "Configure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfigure is a log parse operation binding the contract event 0xcaa97ab28bae75adcb5a02786c64b44d0d3139aa521bf831cdfbe280ef246e36.
//
// Solidity: event Configure(address indexed account, uint8 yieldMode)
func (_WETHRebasing *WETHRebasingFilterer) ParseConfigure(log types.Log) (*WETHRebasingConfigure, error) {
	event := new(WETHRebasingConfigure)
	if err := _WETHRebasing.contract.UnpackLog(event, "Configure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the WETHRebasing contract.
type WETHRebasingDepositIterator struct {
	Event *WETHRebasingDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingDeposit represents a Deposit event raised by the WETHRebasing contract.
type WETHRebasingDeposit struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) FilterDeposit(opts *bind.FilterOpts, account []common.Address) (*WETHRebasingDepositIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Deposit", accountRule)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingDepositIterator{contract: _WETHRebasing.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *WETHRebasingDeposit, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Deposit", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingDeposit)
				if err := _WETHRebasing.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c.
//
// Solidity: event Deposit(address indexed account, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) ParseDeposit(log types.Log) (*WETHRebasingDeposit, error) {
	event := new(WETHRebasingDeposit)
	if err := _WETHRebasing.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingEIP712DomainChangedIterator is returned from FilterEIP712DomainChanged and is used to iterate over the raw logs and unpacked data for EIP712DomainChanged events raised by the WETHRebasing contract.
type WETHRebasingEIP712DomainChangedIterator struct {
	Event *WETHRebasingEIP712DomainChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingEIP712DomainChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingEIP712DomainChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingEIP712DomainChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingEIP712DomainChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingEIP712DomainChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingEIP712DomainChanged represents a EIP712DomainChanged event raised by the WETHRebasing contract.
type WETHRebasingEIP712DomainChanged struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterEIP712DomainChanged is a free log retrieval operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_WETHRebasing *WETHRebasingFilterer) FilterEIP712DomainChanged(opts *bind.FilterOpts) (*WETHRebasingEIP712DomainChangedIterator, error) {

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return &WETHRebasingEIP712DomainChangedIterator{contract: _WETHRebasing.contract, event: "EIP712DomainChanged", logs: logs, sub: sub}, nil
}

// WatchEIP712DomainChanged is a free log subscription operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_WETHRebasing *WETHRebasingFilterer) WatchEIP712DomainChanged(opts *bind.WatchOpts, sink chan<- *WETHRebasingEIP712DomainChanged) (event.Subscription, error) {

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "EIP712DomainChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingEIP712DomainChanged)
				if err := _WETHRebasing.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEIP712DomainChanged is a log parse operation binding the contract event 0x0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31.
//
// Solidity: event EIP712DomainChanged()
func (_WETHRebasing *WETHRebasingFilterer) ParseEIP712DomainChanged(log types.Log) (*WETHRebasingEIP712DomainChanged, error) {
	event := new(WETHRebasingEIP712DomainChanged)
	if err := _WETHRebasing.contract.UnpackLog(event, "EIP712DomainChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the WETHRebasing contract.
type WETHRebasingInitializedIterator struct {
	Event *WETHRebasingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingInitialized represents a Initialized event raised by the WETHRebasing contract.
type WETHRebasingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_WETHRebasing *WETHRebasingFilterer) FilterInitialized(opts *bind.FilterOpts) (*WETHRebasingInitializedIterator, error) {

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &WETHRebasingInitializedIterator{contract: _WETHRebasing.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_WETHRebasing *WETHRebasingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *WETHRebasingInitialized) (event.Subscription, error) {

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingInitialized)
				if err := _WETHRebasing.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_WETHRebasing *WETHRebasingFilterer) ParseInitialized(log types.Log) (*WETHRebasingInitialized, error) {
	event := new(WETHRebasingInitialized)
	if err := _WETHRebasing.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingNewPriceIterator is returned from FilterNewPrice and is used to iterate over the raw logs and unpacked data for NewPrice events raised by the WETHRebasing contract.
type WETHRebasingNewPriceIterator struct {
	Event *WETHRebasingNewPrice // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingNewPriceIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingNewPrice)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingNewPrice)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingNewPriceIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingNewPriceIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingNewPrice represents a NewPrice event raised by the WETHRebasing contract.
type WETHRebasingNewPrice struct {
	Price *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterNewPrice is a free log retrieval operation binding the contract event 0x270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b7.
//
// Solidity: event NewPrice(uint256 price)
func (_WETHRebasing *WETHRebasingFilterer) FilterNewPrice(opts *bind.FilterOpts) (*WETHRebasingNewPriceIterator, error) {

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "NewPrice")
	if err != nil {
		return nil, err
	}
	return &WETHRebasingNewPriceIterator{contract: _WETHRebasing.contract, event: "NewPrice", logs: logs, sub: sub}, nil
}

// WatchNewPrice is a free log subscription operation binding the contract event 0x270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b7.
//
// Solidity: event NewPrice(uint256 price)
func (_WETHRebasing *WETHRebasingFilterer) WatchNewPrice(opts *bind.WatchOpts, sink chan<- *WETHRebasingNewPrice) (event.Subscription, error) {

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "NewPrice")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingNewPrice)
				if err := _WETHRebasing.contract.UnpackLog(event, "NewPrice", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNewPrice is a log parse operation binding the contract event 0x270b316b51ab2cf3a3bb8ca4d22e76a327d05e762fcaa8bd6afaf8cfde9270b7.
//
// Solidity: event NewPrice(uint256 price)
func (_WETHRebasing *WETHRebasingFilterer) ParseNewPrice(log types.Log) (*WETHRebasingNewPrice, error) {
	event := new(WETHRebasingNewPrice)
	if err := _WETHRebasing.contract.UnpackLog(event, "NewPrice", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the WETHRebasing contract.
type WETHRebasingTransferIterator struct {
	Event *WETHRebasingTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingTransfer represents a Transfer event raised by the WETHRebasing contract.
type WETHRebasingTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_WETHRebasing *WETHRebasingFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*WETHRebasingTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingTransferIterator{contract: _WETHRebasing.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_WETHRebasing *WETHRebasingFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *WETHRebasingTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingTransfer)
				if err := _WETHRebasing.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_WETHRebasing *WETHRebasingFilterer) ParseTransfer(log types.Log) (*WETHRebasingTransfer, error) {
	event := new(WETHRebasingTransfer)
	if err := _WETHRebasing.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// WETHRebasingWithdrawalIterator is returned from FilterWithdrawal and is used to iterate over the raw logs and unpacked data for Withdrawal events raised by the WETHRebasing contract.
type WETHRebasingWithdrawalIterator struct {
	Event *WETHRebasingWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *WETHRebasingWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(WETHRebasingWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(WETHRebasingWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *WETHRebasingWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *WETHRebasingWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// WETHRebasingWithdrawal represents a Withdrawal event raised by the WETHRebasing contract.
type WETHRebasingWithdrawal struct {
	Account common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterWithdrawal is a free log retrieval operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed account, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) FilterWithdrawal(opts *bind.FilterOpts, account []common.Address) (*WETHRebasingWithdrawalIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _WETHRebasing.contract.FilterLogs(opts, "Withdrawal", accountRule)
	if err != nil {
		return nil, err
	}
	return &WETHRebasingWithdrawalIterator{contract: _WETHRebasing.contract, event: "Withdrawal", logs: logs, sub: sub}, nil
}

// WatchWithdrawal is a free log subscription operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed account, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) WatchWithdrawal(opts *bind.WatchOpts, sink chan<- *WETHRebasingWithdrawal, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _WETHRebasing.contract.WatchLogs(opts, "Withdrawal", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(WETHRebasingWithdrawal)
				if err := _WETHRebasing.contract.UnpackLog(event, "Withdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawal is a log parse operation binding the contract event 0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65.
//
// Solidity: event Withdrawal(address indexed account, uint256 amount)
func (_WETHRebasing *WETHRebasingFilterer) ParseWithdrawal(log types.Log) (*WETHRebasingWithdrawal, error) {
	event := new(WETHRebasingWithdrawal)
	if err := _WETHRebasing.contract.UnpackLog(event, "Withdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
